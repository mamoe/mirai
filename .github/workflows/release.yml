name: Release Publish

on:
  push:
    tags:
      - 'v*' # 正式版本
    paths-ignore:
      - 'docs/**'
      - 'mirai-console/docs/**'
      - '**/*.md'


jobs:

  publish-others:
    name: "Others (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-12
    env:
      enableLocalPublishingTest: 'false'
      gradleArgs: --scan "-Dmirai.target=jvm;android;!other" "-Pkotlin.compiler.execution.strategy=in-process"
      isMac: ${{ startsWith(matrix.os, 'macos') }}
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Keys setup
        shell: bash
        run: |
          mkdir build-gpg-sign
          echo "$GPG_PRIVATE" > build-gpg-sign/keys.gpg
          echo "$GPG_PUBLIC_" > build-gpg-sign/keys.gpg.pub
          mkdir build-secret-keys
          echo "$SONATYPE_USER" > build-secret-keys/sonatype.key
          echo "$SONATYPE_KEY" >> build-secret-keys/sonatype.key
        env:
          GPG_PRIVATE: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PUBLIC_: ${{ secrets.GPG_PUBLIC_KEY }}
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_KEY: ${{ secrets.SONATYPE_KEY }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache konan
        uses: pat-s/always-upload-cache@v3
        with:
          path: ~/.konan
          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - if: ${{ env.isUnix == 'true' }}
        run: chmod -R 777 *

      # Prepare environment for linking for macOS

      - if: ${{ env.isMac == 'true' }}
        name: Install OpenSSL
        run: >
          git clone https://github.com/openssl/openssl.git --recursive &&
          cd openssl &&
          git checkout tags/openssl-3.0.3 &&
          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&
          make &&
          sudo make install

      - name: Clean and download dependencies
        run: ./gradlew clean ${{ env.gradleArgs }}

      - name: Check keys
        run: ./gradlew ensureMavenCentralAvailable ${{ env.gradleArgs }}

      - name: "Assemble"
        run: ./gradlew assemble ${{ env.gradleArgs }}

      - name: Publish Local Artifacts
        if: ${{ env.enableLocalPublishingTest == 'true' }}
        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} "-Dmirai.build.project.version=2.99.0-deps-test"

      - name: "Check"
        run: ./gradlew check ${{ env.gradleArgs }}

      - if: ${{ env.isMac == 'true' }}
        name: Ensure KDoc valid
        run: ./gradlew dokkaHtmlMultiModule ${{ env.gradleArgs }}

      - name: Publish
        if: ${{ env.isMac == 'true' }}
        run: ./gradlew publish ${{ env.gradleArgs }}

      - name: Publish Gradle plugin
        run: ./gradlew
          :mirai-console-gradle:publishPlugins ${{ env.gradleArgs }}
          -Dgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }} -Pgradle.publish.key=${{ secrets.GRADLE_PUBLISH_KEY }}
          -Dgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }} -Pgradle.publish.secret=${{ secrets.GRADLE_PUBLISH_SECRET }}

  publish-core-native:
    name: "Native (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
          - ubuntu-20.04
          - macos-12
        include:
          - os: windows-2022
            targetName: mingwX64
          - os: ubuntu-20.04
            targetName: linuxX64
          - os: macos-12
            targetName: macosX64
    env:
      # FIXME there must be two or more targets, or we'll get error on `@OptionalExpectation`
      # > Declaration annotated with '@OptionalExpectation' can only be used in common module sources
      enableLocalPublishingTest: 'false'
      gradleArgs: --scan  "-Dmirai.target=jvm;${{ matrix.targetName }};!other" "-Pkotlin.compiler.execution.strategy=in-process" "-Dorg.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8"
      isMac: ${{ startsWith(matrix.os, 'macos') }}
      isWindows: ${{ startsWith(matrix.os, 'windows') }}
      isUbuntu: ${{ startsWith(matrix.os, 'ubuntu') }}
      isUnix: ${{ startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu') }}
      VCPKG_DEFAULT_BINARY_CACHE: ${{ startsWith(matrix.os, 'windows') && 'C:\vcpkg\binary_cache' || '/usr/local/share/vcpkg/binary_cache' }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt-openj9'
          java-version: '17'

      - name: Keys setup
        shell: bash
        run: |
          mkdir build-gpg-sign
          echo "$GPG_PRIVATE" > build-gpg-sign/keys.gpg
          echo "$GPG_PUBLIC_" > build-gpg-sign/keys.gpg.pub
          mkdir build-secret-keys
          echo "$SONATYPE_USER" > build-secret-keys/sonatype.key
          echo "$SONATYPE_KEY" >> build-secret-keys/sonatype.key
        env:
          GPG_PRIVATE: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PUBLIC_: ${{ secrets.GPG_PUBLIC_KEY }}
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_KEY: ${{ secrets.SONATYPE_KEY }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache konan
        uses: pat-s/always-upload-cache@v3
        with:
          path: ~/.konan
          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Prepare to cache vcpkg
        if: ${{ env.isWindows == 'true' }}
        run: mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}

      - name: Cache vcpkg
        if: ${{ env.isWindows == 'true' }}
        uses: pat-s/always-upload-cache@v3
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: ${{ runner.os }}-vcpkg-binary-cache-${{ github.job }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-binary-cache-

      - if: ${{ env.isUnix == 'true' }}
        run: chmod -R 777 *

      # Prepare environment for linking on macOS
      - if: ${{ env.isMac == 'true' }}
        name: Install OpenSSL on Mac OS
        run: >
          git clone https://github.com/openssl/openssl.git --recursive &&
          cd openssl &&
          git checkout tags/openssl-3.0.3 &&
          ./Configure --prefix=/opt/openssl --openssldir=/usr/local/ssl &&
          make &&
          sudo make install

      # Prepare environment for linking on Ubuntu
      - if: ${{ env.isUbuntu == 'true' }}
        name: Install OpenSSL on Ubuntu
        run: sudo apt install libssl-dev -y

      # Prepare environment for linking on Windows
      - if: ${{ env.isWindows == 'true' }}
        name: Setup Memory Environment on Windows
        run: >
          wmic pagefileset where name="D:\\pagefile.sys" set InitialSize=1024,MaximumSize=9216 &
          net stop mongodb
        shell: cmd
        continue-on-error: true

      - if: ${{ env.isWindows == 'true' }}
        name: Install OpenSSL & cURL on Windows
        run: |
          echo "set(VCPKG_BUILD_TYPE release)" | Out-File -FilePath "$env:VCPKG_INSTALLATION_ROOT\triplets\x64-windows.cmake" -Encoding utf8 -Append
          vcpkg install openssl:x64-windows curl[core,ssl]:x64-windows
          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\crypto.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libcrypto.lib
          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\ssl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libssl.lib
          New-Item -Path $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\curl.lib -ItemType SymbolicLink -Value $env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\lib\libcurl.lib
          echo "$env:VCPKG_INSTALLATION_ROOT\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Clean and download dependencies
        run: ./gradlew clean ${{ env.gradleArgs }}

      - name: Check keys
        run: ./gradlew ensureMavenCentralAvailable ${{ env.gradleArgs }}

      - name: "Test mirai-core-utils for ${{ matrix.os }}"
        run: ./gradlew :mirai-core-utils:${{ matrix.targetName }}Test ${{ env.gradleArgs }}

      - name: "Test mirai-core-api for ${{ matrix.os }}"
        run: ./gradlew :mirai-core-api:${{ matrix.targetName }}Test ${{ env.gradleArgs }}

      - name: "Test mirai-core for ${{ matrix.os }}"
        run: ./gradlew :mirai-core:${{ matrix.targetName }}Test ${{ env.gradleArgs }}

      - name: Publish Local Artifacts
        if: ${{ env.enableLocalPublishingTest == 'true' }}
        run: ./gradlew :mirai-deps-test:publishMiraiArtifactsToMavenLocal ${{ env.gradleArgs }} "-Dmirai.build.project.version=2.99.0-deps-test"

      - name: Check Publication
        run: ./gradlew :mirai-deps-test:check ${{ env.gradleArgs }}

      # Publish native snapshots. Other artifacts are published in publish-mirai-all

      - name: Publish MingwX64 Snapshots
        if: ${{ env.isWindows == 'true' }}
        run: ./gradlew publishMingwX64PublicationToMavenCentralRepository ${{ env.gradleArgs }}

      - name: Publish LinuxX64 Snapshots
        if: ${{ env.isUbuntu == 'true' }}
        run: ./gradlew publishLinuxX64PublicationToMavenCentralRepository ${{ env.gradleArgs }}

      - name: Publish macOSX64 Snapshots
        if: ${{ env.isMac == 'true' }}
        run: ./gradlew publishMacosX64PublicationToMavenCentralRepository ${{ env.gradleArgs }}

  close-repository:
    runs-on: macos-12
    needs:
      - publish-others
      - publish-core-native
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt-openj9'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Close repository
        run: ./gradlew :ci-release-helper:closeRepository --scan